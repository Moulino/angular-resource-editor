!function(angular){"use strict";angular.module("mlResourceEditor",["ngResource","ngMaterial"])}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.controller("mlEditorController",function($scope,$mdDialog,mlResources){$scope.ok=function(){$mdDialog.hide($scope.item)},$scope.cancel=function(){$mdDialog.cancel()},$scope.getOptions=function(field){return angular.isDefined(field.select_resource)?mlResources.getCollection(field.select_resource.collection):void 0},$scope.getOptionText=function(field,option){var column=field.select_resource.column;return option[column]}})}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.controller("mlListController",function($scope,$window,$filter,mlResources,mlEditorDialog,mlListDialog){$scope.items=mlResources.getCollection($scope.name),$scope.loading=!1,$scope.rowSelected=null,$scope.options=mlResources.getOptions($scope.name);var defaultOpts={title_list:"Resource manager",title_add:"Add a resource",title_edit:"Edit a resource",question_remove:"Do you want to remove this resource ?"};angular.extend($scope,defaultOpts,$scope.options),angular.isUndefined($scope.mode)&&console.error("The mode value must be defined."),$scope.itemSelected=function(){return null!=$scope.rowSelected?$scope.items[$scope.rowSelected]:null},$scope.normalizeResources=function(item){var normalized=copy(item);return angular.forEach($scope.fields,function(field){if("select"===field.type&&angular.isDefined(field.select_resource)){var model=field.model,id=normalized[model].id;angular.forEach(mlResources.getCollection(field.select_resource.collection),function(resource){resource.id===id&&(normalized[model]=resource)})}}),normalized},$scope.add=function(){mlEditorDialog.open($scope.name).then(function(item){item.$save().then(function(){mlResources.load($scope.name)},function(err){console.error(err)})})["finally"](function(){"dialog"===$scope.mode&&mlListDialog.open($scope.name)})},$scope.edit=function(){var item=$scope.itemSelected();item=$scope.normalizeResources(item),mlEditorDialog.open($scope.name,item).then(function(item){item.$update().then(function(){mlResources.load($scope.name),$scope.rowSelected=null},function(err){console.error(err)})})["finally"](function(){"dialog"===$scope.mode&&mlListDialog.open($scope.name)})},$scope.remove=function(){if($window.confirm($scope.question_remove)===!0){var item=$scope.itemSelected();item.$remove().then(function(){mlResources.load($scope.name),$scope.rowSelected=null},function(err){console.error(err)})}},$scope.getString=function(field,item){return angular.isFunction(field.to_string)?field.to_string(item):"date"===field.type&&angular.isDefined(field.date_format)?$filter("date")(item[field.model],field.date_format):item[field.model]}})}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.directive("mlList",function($controller,$templateCache){var template=$templateCache.get("mlListTemplate.html");return{restrict:"A",template:template,scope:{},link:function($scope,$element,$attributes){$scope.name=$attributes.name,$scope.mode="inline",$controller("mlListController",{$scope:$scope})}}})}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.directive("mlListSelection",function(){return{restrict:"A",link:function($scope,$element){$element.find("tbody").on("click","tr",function(){$(this).siblings(".selected").removeClass("selected"),$(this).hasClass("selected")?($(this).removeClass("selected"),$scope.rowSelected=null):($(this).addClass("selected"),$scope.rowSelected=$(this).index()),$scope.$apply()})}}})}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.filter("inInputTypes",[function(){var inputTypes=["text","number"];return function(item){for(var i=0;i<inputTypes.length;i++)if(inputTypes[i]==item)return!0;return!1}}])}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.factory("mlEditorDialog",function($rootScope,$mdDialog,$templateCache,mlResources){var template=$templateCache.get("mlEditorTemplate.html");return{open:function(name,item){var isAdding=angular.isUndefined(item),options=mlResources.getOptions(name),editorScope=$rootScope.$new(!0);return editorScope.item=isAdding?mlResources.createResource(name):item,editorScope.title=isAdding?options.title_add:options.title_edit,editorScope.fields=options.fields,$mdDialog.show({template:template,controller:"mlEditorController",scope:editorScope,clickOutsideToClose:!0})},close:function(){$mdDialog.cancel()}}})}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.factory("mlListDialog",function($rootScope,$mdDialog,$templateCache){var listTemplate=$templateCache.get("mlListTemplate.html"),dialogTemplate="<md-dialog><i class='md-icon ml-close-button material-icons' ng-click='cancel()'>close</i><md-dialog-content class='md-dialog-content'>"+listTemplate+"</md-dialog-content></md-dialog>";return{open:function(name){var listScope=$rootScope.$new(!0);return listScope.name=name,listScope.mode="dialog",$mdDialog.show({template:dialogTemplate,controller:"mlListController",scope:listScope,clickOutsideToClose:!0})},close:function(){$mdDialog.hide()}}})}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.provider("mlResources",function(){var resources=this.resources={},collections=this.collections={},options=this.options={};this.addResource=function(opts){var name=opts.name;options[name]=opts},this.$get=function($resource,$window,mlResourceTransform){var service={init:function(){var defaultActions={query:{isArray:!0,method:"GET",transformResponse:mlResourceTransform.response},update:{method:"PUT",transformRequest:mlResourceTransform.request},save:{method:"POST",transformRequest:mlResourceTransform.request}};angular.forEach(options,function(opts,name){var actions={};angular.merge(actions,defaultActions,opts.actions),resources[name]=$resource(opts.url,opts.url_params,actions),collections[name]=[],service.load(name)})},load:function(name){if(angular.isUndefined(name))throw"The function load() from mlResources service requires the 'name' attribut.";var resource=service.getResource(name),collection=service.getCollection(name);resource.query().$promise.then(function(data){collection.length=0;for(var i=0;i<data.length;i++)collection.push(data[i])},function(err){$window.alert(err.statusText)})},getResource:function(name){return resources[name]},getCollection:function(name){return collections[name]},getOptions:function(name){return options[name]},createResource:function(name){var resource=service.getResource(name),fields=service.getOptions(name).fields,item=new resource;return angular.forEach(fields,function(field){angular.isDefined(field.type)&&("date"===field.type?item[field.model]=new Date:"select"===field.type?item[field.model]=null:"number"===field.type?item[field.model]=0:"text"===field.type&&(item[field.model]=""))}),item}};return service}})}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.factory("mlResourceTransform",function(mlUtils){return{request:function(obj){return angular.forEach(obj,function(value,key){angular.isObject(value)&&angular.isDefined(value.id)&&(obj[key]=value.id)}),angular.toJson(obj)},response:function(data){var obj=angular.fromJson(data);return mlUtils.rDateConvert(obj),obj}}})}(angular),function(angular){"use strict";var module=angular.module("mlResourceEditor");module.factory("mlUtils",function(){var service={rDateConvert:function(obj){angular.forEach(obj,function(value,key){if(angular.isObject(value))service.rDateConvert(value);else if(angular.isString(value)){var date=new Date(value);isNaN(date.getDate())||(obj[key]=date)}})}};return service})}(angular),function(angular){"use strict";var editorTemplate='<md-dialog><md-dialog-content class="md-dialog-content"><i class="md-icon ml-close-button material-icons" ng-click="cancel()">close</i><div><div class="ml-editor-title">{{ title }}</div><form><div ng-repeat="field in fields"><md-input-container class="md-block" ng-if="field.type|inInputTypes"><label>{{ field.label }}</label><input name="{{ field.model }}" type="{{ field.type }}" ng-model="item[field.model]" ng-required="field.required === true"/></md-input-container><md-input-container class="md-block" ng-if="field.type === \'select\'"><label>{{ field.label }}</label><md-select ng-model="item[field.model]" ng-required="field.required === true"><md-option ng-repeat="option in getOptions(field)" ng-value="option">{{ getOptionText(field, option) }}</md-option></md-select></md-input-container><div ng-if="field.type == \'date\'"><md-datepicker ng-model="item[field.model]" md-placeholder="{{ field.label }}" ng-required="field.required === true" aria-label="datetime"></md-datepicker></div><md-input-container class="md-block" ng-if="field.type == \'textarea\'"><label>{{ field.label }}</label><textarea ng-model="item[field.model]" columns="1" md-max-length="150"></textarea></md-input-container></div><md-dialog-actions><md-button class="md-accent md-raised ml-button" ng-click="cancel()">Annuler</md-button><md-button class="md-primary md-raised ml-button" type="submit" ng-click="ok()">Ok</md-button></md-dialog-actions></form></div></md-dialog-content></md-dialog>',module=angular.module("mlResourceEditor");module.run(function($templateCache){$templateCache.put("mlEditorTemplate.html",editorTemplate)})}(angular),function(angular){"use strict";var template='<div class="ml-list"><div><table ml-list-selection><caption><span class="ml-list-title">{{ title_list }}</span><div class="ml-list-actions"><i class="md-icon material-icons green" ng-click="add()">add</i><i class="md-icon material-icons yellow" ng-disabled="rowSelected == null" ng-click="edit()">create</i><i class="md-icon material-icons red" ng-disabled="rowSelected == null" ng-click="remove()">delete</i></div></caption><thead><tr><th ng-repeat="field in fields">{{ field.label }}</th></tr></thead><tbody><tr ng-repeat="item in items"><td ng-repeat="field in fields">{{ getString(field, item) }}</td></tr></tbody></table></div></div>',module=angular.module("mlResourceEditor");module.run(function($templateCache){$templateCache.put("mlListTemplate.html",template)})}(angular);